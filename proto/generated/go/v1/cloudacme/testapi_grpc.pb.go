// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: v1/cloudacme/testapi.proto

package cloudacme

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestAPIClient is the client API for TestAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestAPIClient interface {
	Echo(ctx context.Context, in *TestAPIEchoRequest, opts ...grpc.CallOption) (*TestAPIEchoResponse, error)
}

type testAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewTestAPIClient(cc grpc.ClientConnInterface) TestAPIClient {
	return &testAPIClient{cc}
}

func (c *testAPIClient) Echo(ctx context.Context, in *TestAPIEchoRequest, opts ...grpc.CallOption) (*TestAPIEchoResponse, error) {
	out := new(TestAPIEchoResponse)
	err := c.cc.Invoke(ctx, "/cloudacme.v1.TestAPI/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestAPIServer is the server API for TestAPI service.
// All implementations must embed UnimplementedTestAPIServer
// for forward compatibility
type TestAPIServer interface {
	Echo(context.Context, *TestAPIEchoRequest) (*TestAPIEchoResponse, error)
	mustEmbedUnimplementedTestAPIServer()
}

// UnimplementedTestAPIServer must be embedded to have forward compatible implementations.
type UnimplementedTestAPIServer struct {
}

func (UnimplementedTestAPIServer) Echo(context.Context, *TestAPIEchoRequest) (*TestAPIEchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedTestAPIServer) mustEmbedUnimplementedTestAPIServer() {}

// UnsafeTestAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestAPIServer will
// result in compilation errors.
type UnsafeTestAPIServer interface {
	mustEmbedUnimplementedTestAPIServer()
}

func RegisterTestAPIServer(s grpc.ServiceRegistrar, srv TestAPIServer) {
	s.RegisterService(&TestAPI_ServiceDesc, srv)
}

func _TestAPI_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestAPIEchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestAPIServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudacme.v1.TestAPI/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestAPIServer).Echo(ctx, req.(*TestAPIEchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TestAPI_ServiceDesc is the grpc.ServiceDesc for TestAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudacme.v1.TestAPI",
	HandlerType: (*TestAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _TestAPI_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/cloudacme/testapi.proto",
}
