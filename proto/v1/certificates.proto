syntax = "proto3";

package cloudacme.v1;
option go_package = "github.com/ginokent/cloudacme/generated/go/proto/v1;cloudacmev1";

import "google/api/annotations.proto";
import "validate/validate.proto";

message IssueCertificateRequest {
  enum Provider {
    none = 0;
    gcloud = 1;
  }

  string vaultProvider = 1 [(validate.rules).string = { in: [ "gcloud" ] }];
  string acmeAccountKeyVaultResource = 2 [(validate.rules).string.min_len = 1];
  string privateKeyVaultResource = 3 [(validate.rules).string.min_len = 1];
  string certificateVaultResource = 4 [(validate.rules).string.min_len = 1];

  bool renewPrivateKey = 5;
  string keyAlgorithm = 6 [(validate.rules).string = {
    in: [ "", "rsa2048", "rsa4096", "rsa8192", "ecdsa256", "ecdsa384" ]
  }];

  string dnsProvider = 7 [(validate.rules).string = { in: [ "gcloud" ] }];
  string dnsProviderID = 8 [(validate.rules).string.min_len = 1];
  bool termsOfServiceAgreed = 9;
  string email = 10 [(validate.rules).string.email = true];
  int64 thresholdOfDaysToExpire = 11;
  repeated string domains = 12 [(validate.rules).repeated .min_items = 1];
  bool staging = 13;
}

message IssueCertificateResponse {
  string privateKeyVaultVersionResource = 1;
  string certificateVaultVersionResource = 2;
}

service Certificates {
  rpc Issue(IssueCertificateRequest) returns (IssueCertificateResponse) {
    option (google.api.http) = {
      post: "/api/v1/certificates/issue"
      body: "*"
    };
  }
}
